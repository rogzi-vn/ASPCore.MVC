@model ASPCoreMVC.Web.Pages.Manager.ExamDataLibraries.Partials.ExamDataCreateUpdateModel
@* ReSharper disable once CSharpWarnings::CS1998 *@
@{
    Model.SetBreadcrumbBtn(L["Discard &amp; Go back"].Value,
        $"/manager/exam-categories/{Model.CurrentExamCategory.Id}/skill-categories/{Model.CurrentSkillCategory.Id}/skill-parts/{Model.CurrentSkillPart.Id}/exam-data-libraries",
        "fas fa-arrow-left",
        "btn-danger");

    Model.SetBreadcrumb(
        new[] {L["Manager"].Value, "javascript:$('#adminMenuDropdown').click();"},
        new[] {L["Exam categories"].Value, $"/manager/exam-categories"},
        new[]
        {
            Model.CurrentExamCategory.Name,
            $"/manager/exam-categories/{Model.CurrentExamCategory.Id}/skill-categories"
        },
        new[]
        {
            Model.CurrentSkillCategory.Name,
            $"/manager/exam-categories/{Model.CurrentExamCategory.Id}/skill-categories/{Model.CurrentSkillCategory.Id}/skill-parts"
        },
        new[]
        {
            Model.CurrentSkillPart.Name,
            $"/manager/exam-categories/{Model.CurrentExamCategory.Id}/skill-categories/{Model.CurrentSkillCategory.Id}/skill-parts/{Model.CurrentSkillPart.Id}/exam-data-libraries"
        },
        new[] {!Model.IsCreate ? L["Edit question"].Value : L["Create question"].Value});

    var isNoColumn = Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Article ||
                     Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Ignore ||
                     Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Rewrite;

    async Task ArticleRender(string label)
    {
        @Html.Raw("");
        <div class="form-group">
            <label asp-for="Container.Article" class="mb-1">@L[label]</label>
            @* ReSharper disable once ConvertIfStatementToSwitchStatement *@
            @if (Model.Container.ArticleEditor == ASPCoreMVC.Common.EditorDisplayOptions.FullOption)
            {
                <textarea asp-for="Container.Article" class="editor"></textarea>
            }
            else if (Model.Container.ArticleEditor == ASPCoreMVC.Common.EditorDisplayOptions.Simpify)
            {
                <textarea asp-for="Container.Article" class="editor" editor-mint="true"></textarea>
            }
            else if (Model.Container.ArticleEditor == ASPCoreMVC.Common.EditorDisplayOptions.Ignore)
            {
                <textarea asp-for="Container.Article" class="form-control" rows="5"></textarea>
            }
            <div class="form-text text-danger small">
                <span asp-validation-for="Container.Article"></span>
            </div>
        </div>
    }

    const string createQuestionGroupModalId = "addQuestionGroup";
}

@using (Html.BeginStyles())
{
    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
    {
        <link rel="stylesheet" href="/plugins/plyr-3.6.4/plyr.css"/>
    }
}

@using (Html.BeginScripts())
{
    @if (Model.CurrentSkillPart.TrueAnswerType == ASPCoreMVC.Common.TrueAnswerTypes.OnlyOneCorrect)
    {
        <script>
           $(".hover-correct-ans").click(e => {
                const gId = $(e.target).data("q");
                if (typeof gId !== typeof undefined) {
                    $(".hover-correct-ans").each(function () {
                        if ($(this).data('q') == gId) {
                            $(this).removeClass("correct-ans");
                            $(this).children("input").first().val("false");
                        }
                    });
                        $(e.target).addClass("correct-ans");
                        $(e.target).children("input").first().val("true");

                    showToast('info', '@L["Correct answer changed"]');
                }
            });
        </script>
    }
    @if (Model.CurrentSkillPart.TrueAnswerType == ASPCoreMVC.Common.TrueAnswerTypes.FullPickOneCorrect)
    {
        <script>
            $(".hover-correct-ans").each(function () {
                $(this).addClass("correct-ans");
                $(this).children("input").first().val("true");
            });
        </script>
    }
    @*@if (Model.CurrentSkillPart.TrueAnswerType == ASPCoreMVC.Common.TrueAnswerTypes.MultiplePickFullCorrect ||
        Model.CurrentSkillPart.TrueAnswerType == ASPCoreMVC.Common.TrueAnswerTypes.MultiplePickOneCorrect)
            {
                <script>
                    $(".hover-correct-ans").click(e => {
                        var isCorrect = $(e.target).children("input").first().val();
                        if (!isCorrect) {
                            $(e.target).addClass("correct-ans");
                            $(e.target).children("input").first().val("true");
                        } else {
                            $(e.target).removeClass("correct-ans");
                            $(e.target).children("input").first().val("false");
                        }
                    });
                </script>
            }*@


    @if (Model.Container.MasterContentType != ASPCoreMVC.Common.MasterContentTypes.Article &&
         Model.Container.MasterContentType != ASPCoreMVC.Common.MasterContentTypes.Ignore)
    {
        <partial name="@AppTheme.LayoutSelectFileModal"/>
    }

    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
    {
        <script src="/plugins/plyr-3.6.4/plyr.polyfilled.js"></script>
        <script>
            const player = new Plyr('.player');
        </script>
    }

    @if (!Model.IsCreate)
    {
        <script>
    function skillCatDeleted(res) {
        setTimeout(function () {
            window.location = '/manager/exam-categories/@Model.CurrentExamCategory.Id/skill-categories/@Model.CurrentSkillCategory.Id/skill-parts';
        }, 1000);
    }
        </script>
    }

    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio)
    {
        // Nếu dạng câu hỏi là âm thanh
        <script>
            function loadAudio(path) {
                // Lấy đường dẫn âm thanh mặc định trước đó
                var defaultAudioPath = $("#default-media-path").val();
                if (!path) {
                    // Nếu đường dẫn hiện tại không có, gắn đường dẫn cũ.
                    path = defaultAudioPath;
                }
                //else if (path != defaultAudioPath) {
                //    // Nếu đường dẫn hiện tại mới hơn, cập nhật vào nơi lưu trữ
                //    $("#media-path-hidden").val(path);
                //}
                if (path) {
                    const audio = document.createElement("audio");

                    // Clean up the URL Object after we are done with it
                    audio.addEventListener("load", () => {
                        URL.revokeObjectURL(path);
                    });

                    // Thay thế cho thông báo
                    $('#selected-audio').html(audio);

                    // Allow us to control the audio
                    audio.controls = "true";

                    // Set the src and start loading the audio from the file
                    audio.src = path;

                    if (path === defaultAudioPath) {
                        // Ẩn nút reset
                        $("#set-default-audio").hide();
                    } else {
                        if (defaultAudioPath)
                            // Hiển thị nút reset
                            $("#set-default-audio").show();
                    }

                    initAudioPlayer(".audio-player-listen");
                } else {
                    // Ẩn nút reset
                    $("#set-default-audio").hide();

                    // Đưa về giá trị mặc định
                    $("#media-path-hidden").val(defaultAudioPath);

                }
            }
            // Load lần đầu nếu có
            loadAudio();
            // Sự kiện khi âm thanh được chọn
            function audioSelectedEvent(url) {
                loadAudio(url);
            }
        </script>
    }
    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Image)
    {
        // Nếu dạng câu hỏi là âm thanh
        <script>
            function loadImage(path) {
                // Lấy đường dẫn âm thanh mặc định trước đó
                var defaultImagePath = $("#default-media-path").val();
                if (!path) {
                    // Nếu đường dẫn hiện tại không có, gắn đường dẫn cũ.
                    path = defaultImagePath;
                }
                if (path) {
                    $("#image-qg-preview").attr('src', path);

                    if (path === defaultImagePath) {
                        // Ẩn nút reset
                        $("#set-default-image").hide();
                    } else {
                        if (defaultImagePath)
                            // Hiển thị nút reset
                            $("#set-default-image").show();
                    }
                } else {
                    // Ẩn nút reset
                    $("#set-default-image").hide();

                    // Đưa về giá trị mặc định
                    $("#media-path-hidden").val(defaultImagePath);

                    $("#image-qg-preview").attr('src', "/dist/img/holder.png");
                }
            }
            // Load lần đầu nếu có
            loadImage();
            // Sự kiện khi âm thanh được chọn
            function imageSelectedEvent(url) {
                loadImage(url);
            }
        </script>
    }
    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
    {
        // Nếu dạng câu hỏi là âm thanh
        <script>
            function loadVideo(path) {
                // Lấy đường dẫn âm thanh mặc định trước đó
                var defaultVideoPath = $("#default-media-path").val();
                if (!path) {
                    // Nếu đường dẫn hiện tại không có, gắn đường dẫn cũ.
                    path = defaultVideoPath;
                }
                if (path) {
                    injectSource("preview-video", path);

                    if (path === defaultVideoPath) {
                        // Ẩn nút reset
                        $("#set-default-video").hide();
                    } else {
                        if (defaultVideoPath)
                            // Hiển thị nút reset
                            $("#set-default-video").show();
                    }
                } else {
                    // Ẩn nút reset
                    $("#set-default-video").hide();

                    // Đưa về giá trị mặc định
                    $("#media-path-hidden").val(defaultVideoPath);

                    injectSource("preview-video", '/dist/videos/Atoms - 13232.mp4', true).play();
                }
            }
            // Load lần đầu nếu có
            loadVideo();
            // Sự kiện khi âm thanh được chọn
            function videoSelectedEvent(url) {
                loadVideo(url);
            }
        </script>
    }

    @if (Model.CurrentSkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.ImageAnswer)
    {
        // If answer type is image
        <script>
            var selectedId = "";
            $(document).ready(function () {
                $("img[id^='preview-img-ans-']").click(event => {
                    selectedId = $(event.currentTarget).attr('id');
                });
                $("button[id^='def-img-ans-']").attr('disabled', '');
                $("button[id^='def-img-ans-']").click(event => {
                    var e = $(event.currentTarget);
                    e.attr('disabled', '');
                    var id = $(e).attr('id').replace('def-', '');
                    var defaultValue = $(e).data('default');

                    $(`#${id}`).val(defaultValue);
                    $(`#preview-${id}`).attr('src', url);
                });
            });

            // Sự kiện khi hình ảnh được chọn
            function ansImgSelected(url) {
                $(`#${selectedId}`).attr('src', url);
                $(`#${selectedId.replace('preview-', 'def-')}`).attr('disabled', '');
            }
        </script>
    }

    <script>
        var isCreate = @Model.IsCreate.ToString().ToLower();
        var selectedQuestionGroupId = '@(Model.Container.ExamQuestionGroupId)';
        $("#add-question-group-btn").click(showCreateQuestionGroupModal);
        function showCreateQuestionGroupModal() {
            var url = `/manager/question-groups/@Model.CurrentSkillPart.Id/create`;
             $("#@createQuestionGroupModalId-content").load(url, function () {
                // Xử lý sự kiện sau khi load xong
                $("#@createQuestionGroupModalId").parent().attr('action', `/api/app/exam-question-group`);
                // Hiển thị hộp thoại
                $("#@createQuestionGroupModalId").modal('show');
            });
        }
        function questionGroupCreated(res) {
            fetch(`/api/app/exam-question-group?SkillPartId=@Model.CurrentSkillPart.Id`)
                .then(function (r) {
                    if (r.ok) {
                        r.json().then(r => {
                            if (r.success && r.data) {
                                $("#question-groups-selector").html('');
                                $("#question-groups-selector")
                                    .append($('<option>', {
                                        value: '',
                                        text: '@L["Uncategorized"]'
                                    }));
                                r.data.items.forEach(function (x) {
                                    $("#question-groups-selector")
                                        .append($('<option>', {
                                        value: x.id,
                                        text: x.name
                                    }));
                                });
                                $("#question-groups-selector").val(selectedQuestionGroupId);
                                $('#question-groups-selector').selectpicker('refresh');
                            }
                        });
                    }
                });
        }

        questionGroupCreated();
    </script>
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">
        @if (!Model.IsCreate)
        {
            @Html.Raw(L["Edit question"].Value + " " + $"\"{Model.Container.Name}\"")
        }
        else
        {
            @L["Create question"]
        }
    </h1>
</div>

<form method="post">
@Html.ValidationSummary()
<input type="hidden" asp-for="Container.Id"/>
@*<input type="hidden" asp-for="Container.ExamQuestionGroupId" />*@
<input type="hidden" id="default-media-path" value="@Model.Container.MediaPath"/>
<input type="hidden" asp-for="Container.MediaPath" id="media-path-hidden"/>
<input type="hidden" asp-for="Container.MasterContentType"/>
<input type="hidden" asp-for="Container.SkillPartId"/>

<div class="row mb-4">
<div class="col-12 mt-4 mt-lg-0">
<div class="card shadow">
<div class="card-header py-3">
    <h6 class="m-0 font-weight-bold text-primary">
        @L["Question content"]
    </h6>
</div>
<div class="card-body">
@* Start Phân mục dành cho container *@
<div class="row">
<div class="col-12 @Html.Raw(isNoColumn ? "" : " col-lg-4")">
    <div class="form-group">
        <label asp-for="Container.Name" class="mb-1"></label>
        <input asp-for="Container.Name" class="form-control">
        <div class="form-text text-danger small">
            <span asp-validation-for="Container.Name"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Container.ExamQuestionGroupId" class="mb-1"></label>
        <div class="d-flex">
            <div class="flex-grow-1  mr-2">
                <select asp-for="Container.ExamQuestionGroupId" class="form-control selectpicker"
                        id="question-groups-selector"
                        data-live-search="true">
                </select>
            </div>
            <button type="button" class="btn btn-success" id="add-question-group-btn">
                <i class="fa fa-plus"></i>
            </button>
        </div>
        <div class="form-text text-danger small">
            <span asp-validation-for="Container.ExamQuestionGroupId"></span>
        </div>
    </div>
    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Grammar)
    {
        <div class="form-group">
            <label asp-for="Container.GrammarId" class="mb-1"></label>
            <select asp-for="Container.GrammarId" class="form-control selectpicker"
                    data-live-search="true">
                @foreach (var item in Model.Grammars)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
            <div class="form-text text-danger small">
                <span asp-validation-for="Container.GrammarId"></span>
            </div>
        </div>
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Image)
    {
        <div class="form-group">
            <label asp-for="Container.MediaPath" class="mb-1">@L["Photo for question"]</label>
            <img class="img-fluid row mx-auto shadow-sm" id="image-qg-preview"/>
            <div class="form-text text-danger small mt-2 text-center">
                <span asp-validation-for="Container.MediaPath"></span>
            </div>
            <div class="text-center">
                <button type="button"
                        class="btn btn-info btn-choose-file btn-sm shadow-sm btn-block mt-2"
                        data-for="media-path-hidden" data-callback="imageSelectedEvent"
                        data-extensions="png,jpg,jpeg,gif">
                    @L["Change photo"]
                </button>
                <button id="set-default-image" type="button"
                        class="btn btn-danger btn-sm shadow-sm btn-block"
                        onclick="loadImage()">
                    @L["Remove"]
                </button>
            </div>
        </div>
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio)
    {
        <div class="form-group">
            <label asp-for="Container.MediaPath">@L["Audio"]</label>
            <div id="selected-audio" class="text-center audio-player-listen">
            </div>
            <div class="form-text text-danger small mt-2 text-center">
                <span asp-validation-for="Container.MediaPath"></span>
            </div>
            <div class="text-center mt-2">
                <button type="button"
                        class="btn btn-info btn-choose-file btn-sm shadow-sm btn-block"
                        data-for="media-path-hidden" data-callback="audioSelectedEvent"
                        data-extensions="mp3,wav,ogg">
                    @L["Change audio"]
                </button>
                <button id="set-default-audio" type="button"
                        class="btn btn-danger btn-sm shadow-sm btn-block"
                        onclick="loadAudio()">
                    @L["Remove"]
                </button>
            </div>
        </div>
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
    {
        <div class="form-group">
            <label asp-for="Container.MediaPath">@L["Audio"]</label>
            <div id="selected-video" class="text-center">
                <video class="w-100 player" id="preview-video" playsinline controls>
                </video>
            </div>
            <div class="form-text text-danger small mt-2 text-center">
                <span asp-validation-for="Container.MediaPath"></span>
            </div>
            <div class="text-center mt-2">
                <button type="button"
                        class="btn btn-info btn-choose-file btn-sm shadow-sm btn-block"
                        data-for="media-path-hidden" data-callback="videoSelectedEvent"
                        data-extensions="mp4,webm,mkv,ogv,ogg,avi,mov,qt,wmv,m4p,m4v,mpg,mpeg,mpe,m4v,3gp">
                    @L["Change video"]
                </button>
                <button id="set-default-video" type="button"
                        class="btn btn-danger btn-sm shadow-sm btn-block"
                        onclick="loadVideo()">
                    @L["Remove"]
                </button>
            </div>
        </div>
    }

</div>
<div class="col-12 @Html.Raw(isNoColumn ? "" : " col-lg-8")">
    @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Grammar)
    {
        // Ignore article input
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Image)
    {
        // Ignore article input
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio)
    {
        await ArticleRender("Transcripts");
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
    {
        await ArticleRender("Transcripts");
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Article)
    {
        await ArticleRender("Article");
    }
    else if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Ignore)
    {
        // Ignore article input
    }
    @* Start Phần render danh sách cầu hỏi và câu trả lời *@
    <label for="accordion" class="mb-1">@L["Questions"]</label>
    <div id="accordion" class="@Html.Raw(Model.CurrentSkillPart.IsHaveQuestionText ? "q-at" : "")">
        @for (int i = 0; i < Model.Container.Questions.Count; i++)
        {
            var id = Model.Container.Questions[i].Id;
            var isSpecialQuestion = Model.Container.Questions[i].IsHaveQuestionText &&
                                    Model.CurrentSkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.WriteAnswer;
            <input type="hidden" asp-for="Container.Questions[i].Id"/>
            <input type="hidden" asp-for="Container.Questions[i].ExamQuestionContainerId"/>
            <input type="hidden" asp-for="Container.Questions[i].IsHaveQuestionText"/>
            <div class="card">
                <div class="card-header @Html.Raw(i != 0 ? "" : "collapsed")" id="h-@id" data-toggle="collapse" data-target="#c-@id" aria-expanded="@Html.Raw(i == 0 ? "true" : "false")" aria-controls="c-@id">
                    <div class="">
                        @if (Model.Container.Questions[i].IsHaveQuestionText)
                        {
                            @if (isSpecialQuestion)
                            {
                                <div class="form-group mb-0">
                                    <div class="font-weight-bold">@L["Question "] #@(i + 1)</div>
                                </div>
                            }
                            else
                            {
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text font-weight-bold">#@(i + 1)</span>
                                    </div>
                                    <input asp-for="Container.Questions[i].Text" class="form-control prevent-default">
                                </div>
                                <div class="form-text text-danger small">
                                    <span asp-validation-for="Container.Questions[i].Text"></span>
                                </div>
                            }
                        }
                        else
                        {
                            <input type="hidden" asp-for="Container.Questions[i].Text" value="Ignore"/>
                            <div class="form-group mb-0">
                                <div class="font-weight-bold">@L["Question "] #@(i + 1) @L["with no content"]</div>
                            </div>
                        }
                    </div>
                </div>

                <div id="c-@id" class="collapse @Html.Raw(i != 0 ? "" : "show")" aria-labelledby="h-@id" data-parent="#accordion">
                    <div class="card-body">
                        @{
                            var colNum = 12 / Model.Container.Questions[i].Answers.Count;
                            var col = $"col-12 col-lg-{colNum}";
                        }

                        @if (isSpecialQuestion)
                        {
                            <div class="form-group">
                                <label asp-for="Container.Questions[i].Text" class="mb-1"></label>
                                <textarea asp-for="Container.Questions[i].Text" class="editor" editor-mint="true" editor-height="200"></textarea>
                                <div class="form-text text-danger small">
                                    <span asp-validation-for="Container.Questions[i].Text"></span>
                                </div>
                            </div>
                        }

                        @if (Model.Container.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Rewrite)
                        {
                                                    @*  Start render phần khung nhập câu viết lại *@
                            <div class="form-group">
                                <label asp-for="Container.Questions[i].TextClone" class="mb-1"></label>
                                <input asp-for="Container.Questions[i].TextClone" class="form-control">
                                <div class="form-text text-danger small">
                                    <span asp-validation-for="Container.Questions[i].TextClone"></span>
                                </div>
                            </div>
                                                    @*  End render phần khung nhập câu viết lại *@
                        }


                        <div class="row">
                            @for (int j = 0; j < Model.Container.Questions[i].Answers.Count; j++)
                            {
                                if (Model.Container.Questions[i].Answers[j].Id != Guid.Empty)
                                {
                                    <input type="hidden" asp-for="Container.Questions[i].Answers[j].Id"/>
                                }
                                <input type="hidden" asp-for="Container.Questions[i].Answers[j].ExamQuestionId"/>
                                <input type="hidden" asp-for="Container.Questions[i].Answers[j].AnswerType"/>
                                <input type="hidden" asp-for="Container.Questions[i].Answers[j].TrueAnswerType"/>

                                @if (Model.Container.Questions[i].Answers[j].AnswerType != ASPCoreMVC.Common.AnswerTypes.WriteAnswer &&
                                     Model.Container.Questions[i].Answers[j].AnswerType != ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)
                                {
                                    <div class="text-dark @col">
                                        <div class="d-inline-block hover-correct-ans bg-transparent @Html.Raw(Model.Container.Questions[i].Answers[j].IsCorrect ? "correct-ans" : "")" data-q="@id"
                                             data-toggle="tooltip" data-placement="bottom" title="@L["Make this to correct answer"]">
                                            <input type="hidden" asp-for="Container.Questions[i].Answers[j].IsCorrect"/>
                                            <i class="fas fa-check-circle mr-2"></i>
                                            <span class="font-weight-bold">@L["Answer "] @(j + 1)</span>
                                        </div>
                                        <div class="form-group mb-0 mt-2">
                                            @if (Model.Container.Questions[i].Answers[j].AnswerType == ASPCoreMVC.Common.AnswerTypes.ImageAnswer)
                                            {
                                                var areaId = Guid.NewGuid();
                                                var defaultImage = Model.Container.Questions[i].Answers[j].AnswerContent;
                                                if (defaultImage.IsNullOrEmpty())
                                                {
                                                    defaultImage = await s.GetOrNullAsync(PageSettingProvider.SITE_HOLDER_IMAGE);
                                                }
                                                <input asp-for="Container.Questions[i].Answers[j].AnswerContent"
                                                       id="img-ans-@areaId"
                                                       type="hidden" class="form-control prevent-default">
                                                <img class="w-100 border border-dark rounded answer-image btn-choose-file" src="@defaultImage"
                                                     data-for="img-ans-@areaId"
                                                     id="preview-img-ans-@areaId"
                                                     data-callback="ansImgSelected"
                                                     data-extensions="png,jpg,jpeg,gif"
                                                     data-toggle="tooltip" data-placement="bottom" title="@L["Click to change photo"]">
                                                <div class="text-center">
                                                    <button id="def-img-ans-@areaId" type="button"
                                                            data-default="@defaultImage"
                                                            class="btn btn-danger btn-sm shadow-sm btn-block mt-2">
                                                        @L["Remove"]
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <input asp-for="Container.Questions[i].Answers[j].AnswerContent" class="form-control prevent-default">
                                            }
                                            <div class="form-text text-danger small">
                                                <span asp-validation-for="Container.Questions[i].Answers[j].AnswerContent"></span>
                                                <span asp-validation-for="Container.Questions[i].Answers[j].IsCorrect"></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }

                            <div class="col-12 form-group mb-0">
                                <label asp-for="Container.Questions[i].Explain" class="mb-1"></label>
                                <textarea asp-for="Container.Questions[i].Explain" class="editor" editor-mint="true" editor-height="100"></textarea>
                                <div class="form-text text-danger small">
                                    <span asp-validation-for="Container.Questions[i].Explain"></span>
                                </div>
                            </div>
                        </div>
                        <div class="form-text text-danger small mt-2 text-center">
                            <span asp-validation-for="Container.Questions[i].Answers"></span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    @* End Phần render danh sách cầu hỏi và câu trả lời *@
    <div class="mt-3">
        <button type="submit" class="btn btn-primary btn-sm shadow-sm float-right">@L["Save changes"]</button>
    </div>
</div>
</div>
@* End Phân mục dành cho container *@
</div>
</div>
</div>
</div>
</form>

<component type="typeof(FormModelComponent)"
           render-mode="ServerPrerendered"
           param-Id="@("addQuestionGroup")"
           param-Title="@("Create question group")"
           param-Callback="@("questionGroupCreated")"/>